// Starfield.js (formerly your main component logic)

import React, { useRef, useEffect, useState } from 'react';
import './App.css'; 
import Sidebar from './components/Sidebar'; 
import SearchBar from './components/SearchBar'; // ðŸŽ¯ NEW: Import the SearchBar component

// --- CONFIGURATION ---
const MAX_STAR_COUNT = 1200;
const MIN_SPEED = 0.0005;
const MAX_SPEED = 0.003;
const SIDEBAR_WIDTH = 280; // Define sidebar width here
// ---------------------

// Star Class Definition (remains the same)
class Star {
Â  Â  constructor(W, H, sidebarWidth, startX = null, startY = null) { 
Â  Â  Â  Â  const isNew = startX !== null;
Â  Â  Â  Â  this.W = W;
Â  Â  Â  Â  this.H = H;
Â  Â  Â  Â  this.sidebarWidth = sidebarWidth; 

Â  Â  Â  Â  if (isNew) {
Â  Â  Â  Â  Â  Â  this.x = startX - W / 2;
Â  Â  Â  Â  Â  Â  this.y = startY - H / 2;
Â  Â  Â  Â  Â  Â  this.z = W;
Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  this.x = Math.random() * (W - sidebarWidth) + sidebarWidth / 2 - W / 2;
Â  Â  Â  Â  Â  Â  this.y = Math.random() * H - H / 2;
Â  Â  Â  Â  Â  Â  this.z = Math.random() * W;
Â  Â  Â  Â  }
Â  Â  Â  Â  
Â  Â  Â  Â  this.speedMultiplier = Math.random() * (MAX_SPEED - MIN_SPEED) + MIN_SPEED;
Â  Â  }

Â  Â  update(starsArray) {
Â  Â  Â  Â  this.z -= this.W * this.speedMultiplier;

Â  Â  Â  Â  if (this.z <= 0) {
Â  Â  Â  Â  Â  Â  if (starsArray.length > MAX_STAR_COUNT) {
Â  Â  Â  Â  Â  Â  Â  Â  return false;
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  this.reset();
Â  Â  Â  Â  }
Â  Â  Â  Â  return true;
Â  Â  }

Â  Â  reset() {
Â  Â  Â  Â  this.x = Math.random() * (this.W - this.sidebarWidth) + this.sidebarWidth / 2 - this.W / 2;
Â  Â  Â  Â  this.y = Math.random() * this.H - this.H / 2;
Â  Â  Â  Â  this.z = this.W;
Â  Â  }

Â  Â  draw(ctx) {
Â  Â  Â  Â  const perspective = this.W / this.z;
Â  Â  Â  Â  const xP = this.x * perspective + this.W / 2;
Â  Â  Â  Â  const yP = this.y * perspective + this.H / 2;

Â  Â  Â  Â  const size = (1 - this.z / this.W) * 2.5;
Â  Â  Â  Â  const brightness = Math.min(255, (1 - this.z / this.W) * 255);

Â  Â  Â  Â  ctx.beginPath();
Â  Â  Â  Â  ctx.arc(xP, yP, size, 0, Math.PI * 2, false);
Â  Â  Â  Â  ctx.fillStyle = `rgba(255, 255, 255, ${brightness / 255})`;
Â  Â  Â  Â  ctx.fill();
Â  Â  }
}


export default function Starfield() {
Â  Â  const canvasRef = useRef(null);
Â  Â  const animationFrameRef = useRef(null);
Â  Â  const starsRef = useRef([]);

Â  Â  const [dimensions, setDimensions] = useState({ 
Â  Â  Â  Â  W: window.innerWidth, 
Â  Â  Â  Â  H: window.innerHeight 
Â  Â  });
Â  Â  const { W, H } = dimensions;

Â  Â  const setupCanvas = () => {
Â  Â  Â  Â  const currentW = window.innerWidth;
Â  Â  Â  Â  const currentH = window.innerHeight;
Â  Â  Â  Â  setDimensions({ W: currentW, H: currentH });

Â  Â  Â  Â  const canvas = canvasRef.current;
Â  Â  Â  Â  if (canvas) {
Â  Â  Â  Â  Â  Â  canvas.width = currentW;
Â  Â  Â  Â  Â  Â  canvas.height = currentH;
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const spawnStar = (x, y) => {
Â  Â  Â  Â  if (x > SIDEBAR_WIDTH && starsRef.current.length < MAX_STAR_COUNT) {
Â  Â  Â  Â  Â  Â  starsRef.current.push(new Star(W, H, SIDEBAR_WIDTH, x, y));
Â  Â  Â  Â  }
Â  Â  };

Â  Â  const animate = () => {
Â  Â  Â  Â  const canvas = canvasRef.current;
Â  Â  Â  Â  if (!canvas) return;

Â  Â  Â  Â  const ctx = canvas.getContext('2d');
Â  Â  Â  Â  ctx.fillStyle = 'black';
        ctx.fillRect(0, 0, W, H); 

Â  Â  Â  Â  let newStars = [];
Â  Â  Â  Â  for (let i = 0; i < starsRef.current.length; i++) {
Â  Â  Â  Â  Â  Â  if (starsRef.current[i].update(starsRef.current)) {
Â  Â  Â  Â  Â  Â  Â  Â  starsRef.current[i].draw(ctx);
Â  Â  Â  Â  Â  Â  Â  Â  newStars.push(starsRef.current[i]);
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  starsRef.current = newStars;

Â  Â  Â  Â  animationFrameRef.current = requestAnimationFrame(animate);
Â  Â  };

Â  Â  useEffect(() => {
Â  Â  Â  Â  setupCanvas();

Â  Â  Â  Â  for (let i = 0; i < 800; i++) {
Â  Â  Â  Â  Â  Â  starsRef.current.push(new Star(W, H, SIDEBAR_WIDTH));
Â  Â  Â  Â  }

Â  Â  Â  Â  animationFrameRef.current = requestAnimationFrame(animate);

Â  Â  Â  Â  return () => {
Â  Â  Â  Â  Â  Â  cancelAnimationFrame(animationFrameRef.current);
Â  Â  Â  Â  };
Â  Â  }, [W, H]);

Â  Â  useEffect(() => {
Â  Â  Â  Â  const handleMouseMove = (event) => {
Â  Â  Â  Â  Â  Â  spawnStar(event.clientX, event.clientY);
Â  Â  Â  Â  };

Â  Â  Â  Â  window.addEventListener('mousemove', handleMouseMove);
Â  Â  Â  Â  window.addEventListener('resize', setupCanvas);

Â  Â  Â  Â  return () => {
Â  Â  Â  Â  Â  Â  window.removeEventListener('mousemove', handleMouseMove);
Â  Â  Â  Â  Â  Â  window.removeEventListener('resize', setupCanvas);
Â  Â  Â  Â  };
Â  Â  }, [W, H]);

Â  Â  return (
Â  Â  Â  Â  <div className="starfield-container" style={{ width: W, height: H }}>
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <Sidebar /> 
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  <canvas ref={canvasRef} id="starfield" className="starfield-canvas" />
Â  Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  Â  {/* ðŸŽ¯ NEW: Wrapper for all main content (Greeting + SearchBar) */}
            <div className="main-content-overlay">
                <div className="info-text">
                    <h1 className="greeting-hello">Hello, Noah</h1>
                    <h2 className="greeting-question">What should we do today?</h2>
                </div>
                
                {/* ðŸŽ¯ NEW: SearchBar is placed below the greeting */}
                <SearchBar /> 
            </div>
Â  Â  Â  Â  </div>
Â  Â  );
}